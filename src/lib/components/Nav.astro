---
import Logo from "./Logo.astro";

interface Route {
    name: string;
    path: string;
}

const pathName = Astro.url.pathname;

const routes: Route[] = [
    { name: "home", path: "/" },
    { name: "works", path: "/works/" },
];
---

<header
    transition:persist="main-nav-parent"
    transition:animate="none"
    id="main-header"
>
    <Logo />
    <nav id="main-nav">
        <div class="links">
            {
                routes.map(({ name, path: href }) => {
                    let currentPage = href == pathName;
                    return (
                        <a {href} aria-current={currentPage && "page"}>
                            {name}
                        </a>
                    );
                })
            }
        </div>
    </nav>
</header>

<script>
    const mainHeader = document.getElementById("main-header");

    let keyframes: Keyframe[] = [
        { transform: "scale(1,0)", offset: 0 },
        { transform: "scale(1,0.5)", offset: 0.25 },
        { transform: "scale(1,1)", offset: 1 },
    ];
    let keyFramesOption: KeyframeAnimationOptions = {
        duration: 3000,
        easing: "ease",
        delay: 0,
        fill: "both",
        pseudoElement: "::before",
    };

    let loadAnimation: Animation;

    if (mainHeader) {
        document.addEventListener("astro:before-preparation", () => {
            loadAnimation = mainHeader.animate(keyframes, keyFramesOption);
        });
        document.addEventListener("astro:after-swap", () => {
            //@ts-ignore
            let timeFraction = loadAnimation.currentTime / 3000;
            loadAnimation.cancel();
            if (!timeFraction) return;
            loadAnimation = mainHeader.animate(
                [{ transform: "scale(1,0)" }, { transform: "scale(1,1)" }],
                {
                    ...keyFramesOption,
                    duration: 400,
                    delay: 0,
                }
            );
            loadAnimation.currentTime = timeFraction * 400;
            loadAnimation.reverse();
        });
        document.addEventListener("astro:after-swap", () => {
            const pathName = location.pathname;

            const previousAnchor = mainHeader.querySelector(
                "a[aria-current='page']"
            );
            if (previousAnchor) {
                previousAnchor.removeAttribute("aria-current");
            }

            const currentAnchor = mainHeader.querySelector(
                `a[href='${pathName}']`
            );
            if (currentAnchor) {
                currentAnchor.ariaCurrent = "page";
            }
        });
    }
</script>

<style>
    header {
        padding-block: 8px;
        padding-inline: 16px;
        align-self: center;

        display: flex;
        align-items: center;

        box-shadow: 0 0 8px 0px hsl(0 0% 0% / 0.05);
        border: 1px hsl(0 0% 0% / 0.05) solid;

        position: relative;
        contain: paint;
    }
    header::before {
        content: "";
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;

        transform-origin: center bottom;
        transform: scale(1, 0);

        /* background-color: rgb(235, 238, 65); */
        background-color: hsl(var(--color-secondary));
        z-index: 0;
    }
    header :global(> :first-child) {
        margin-inline-end: 32px;
    }

    nav {
        display: flex;
        overflow: visible;
        z-index: 10;
    }

    .links {
        margin-inline-start: auto;
        display: flex;
        gap: 8px;
    }

    a[aria-current="page"] {
        color: hsl(var(--color-offset));

        position: relative;

        &::after {
            content: "â–¾";
            position: absolute;
            left: 50%;
            top: -10px;
            transform: translate(-50%, 0%);
        }
    }
</style>
