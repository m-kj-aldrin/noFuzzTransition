---
import Icon, { type IconTypes } from "./Icon.astro";

const url = Astro.url;

type TopPaths = "/" | "/works/" | "/generative/";

const paths: { path: TopPaths; name: IconTypes }[] = [
  { path: "/", name: "home" },
  { path: "/works/", name: "works" },
  { path: "/generative/", name: "gen" },
];

const re = /\/works\/.+/;
const work = re.test(url.pathname);
const gen = /\/gen\/.+/.test(url.pathname);
---

<nav id="main-nav">
  <div class="links">
    {
      paths.map(({ name, path }) => {
        const worksSubDir = work && path == "/works/";
        const genSubDir = gen && path == "/generative/";

        const iconType: IconTypes = path == "/" ? "home" : worksSubDir || genSubDir ? "back" : name;

        return (
          <a
            href={path}
            aria-current={url.pathname == path ? "page" : null}
            aria-label={((worksSubDir || genSubDir) && "back to works page") || `link to ${name}`}
            title={name}
          >
            <Icon name={iconType} />
          </a>
        );
      })
    }
  </div>
</nav>

<script>
  const mainHeader = document.getElementById("site-header");

  let keyframes: Keyframe[] = [
    { transform: "scale(1,0)", offset: 0 },
    { transform: "scale(1,0.5)", offset: 0.25 },
    { transform: "scale(1,1)", offset: 1 },
  ];
  let keyFramesOption: KeyframeAnimationOptions = {
    duration: 3000,
    easing: "ease",
    delay: 0,
    fill: "both",
    pseudoElement: "::before",
  };

  let loadAnimation: Animation;

  if (mainHeader) {
    document.addEventListener("astro:before-preparation", () => {
      loadAnimation = mainHeader.animate(keyframes, keyFramesOption);
    });
    document.addEventListener("astro:after-swap", () => {
      //@ts-ignore
      let timeFraction = loadAnimation.currentTime / 3000;
      loadAnimation.cancel();
      if (!timeFraction) return;
      loadAnimation = mainHeader.animate(
        [{ transform: "scale(1,0)" }, { transform: "scale(1,1)" }],
        {
          ...keyFramesOption,
          duration: 400,
          delay: 0,
        }
      );
      loadAnimation.currentTime = timeFraction * 400;
      loadAnimation.reverse();
    });
    document.addEventListener("astro:after-swap", () => {
      const pathName = location.pathname;

      const previousAnchor = mainHeader.querySelector("a[aria-current='page']");
      if (previousAnchor) {
        previousAnchor.removeAttribute("aria-current");
      }

      const currentAnchor = mainHeader.querySelector(`a[href='${pathName}']`);
      if (currentAnchor) {
        currentAnchor.ariaCurrent = "page";
      }
    });
  }
</script>

<style>
  nav {
    display: flex;
    overflow: visible;
    z-index: 10;
  }

  .links {
    margin-inline-start: auto;
    display: flex;
    gap: 8px;
  }

  a[aria-current="page"] {
    color: hsl(var(--color-offset));
  }

  a {
    display: block;
    line-height: 0;
    transition: color 75ms ease;
  }
  span {
    font-weight: 200;
    opacity: 0.5;
  }
  ul {
    display: flex;
    gap: 8px;
    flex-shrink: 0;
  }

  [aria-current="page"],
  [aria-label="back to works page"] {
    color: hsl(var(--color-offset));
  }
</style>
